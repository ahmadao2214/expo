{"version":3,"file":"UseUpdatesEmitter.js","sourceRoot":"","sources":["../src/UseUpdatesEmitter.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAqB,MAAM,WAAW,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAI1C,6DAA6D;AAE7D,IAAI,QAA6B,CAAC;AAElC,SAAS,WAAW;IAClB,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;KAC/B;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,SAAS,YAAY,CAAC,QAA0C;IAC9D,MAAM,OAAO,GAAG,WAAW,EAAE,CAAC;IAC9B,OAAO,OAAO,CAAC,WAAW,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;AAC/D,CAAC;AAED,mCAAmC;AACnC,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,KAAsB,EAAE,EAAE;IAClD,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;KAC9E;IACD,QAAQ,CAAC,IAAI,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,QAA0C,EAAE,EAAE;IAC5E,MAAM,WAAW,GAAG,MAAM,EAAmB,CAAC;IAE9C,SAAS,CAAC,GAAG,EAAE;QACb,WAAW,CAAC,OAAO,GAAG,QAAQ,CAAC;IACjC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,WAAW,CAAC,OAAO,EAAE;YACvB,MAAM,YAAY,GAAG,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACvD,OAAO,GAAG,EAAE;gBACV,YAAY,CAAC,MAAM,EAAE,CAAC;YACxB,CAAC,CAAC;SACH;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC","sourcesContent":["import { DeviceEventEmitter } from 'expo-modules-core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport { useEffect, useRef } from 'react';\n\nimport { UseUpdatesEvent } from './UseUpdates.types';\n\n// Emitter and hook specifically for @expo/use-updates module\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n  }\n  return _emitter;\n}\n\nfunction _addListener(listener: (event: UseUpdatesEvent) => void): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.useUpdatesEvent', listener);\n}\n\n// What JS code uses to emit events\nexport const emitEvent = (event: UseUpdatesEvent) => {\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.useUpdatesEvent', event);\n};\n\nexport const useUpdateEvents = (listener: (event: UseUpdatesEvent) => void) => {\n  const listenerRef = useRef<typeof listener>();\n\n  useEffect(() => {\n    listenerRef.current = listener;\n  }, [listener]);\n\n  useEffect(() => {\n    if (listenerRef.current) {\n      const subscription = _addListener(listenerRef.current);\n      return () => {\n        subscription.remove();\n      };\n    }\n    return undefined;\n  }, []);\n};\n"]}